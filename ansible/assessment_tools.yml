---

- hosts: all
  name : Install assessment tools
  become: no
  become_method: sudo
  vars:
    vm_tools_source_dir: "{{ [vm_tools_dir, 'src'] | path_join }}"
    vm_hostname: "kali-ops"
    vm_username: "kali"
    repositories:
      # Git Only
      - name: "AggressorScripts"
        repo: "github.com/bluscreenofjeff/AggressorScripts"

      - name: "AggressorAssessor"
        repo: "github.com/FortyNorthSecurity/AggressorAssessor"

      - name: "PowerUpSQL"
        repo: "github.com/NetSPI/PowerUpSQL"

      - name: "discover"
        repo: "github.com/leebaird/discover"

      - name: "Sublist3r"
        repo: "github.com/aboul3la/Sublist3r"

      - name: "BloodHound"
        repo: "github.com/BloodHoundAD/BloodHound"

      - name: "Seclists"
        repo: "github.com/danielmiessler/SecLists"

      # Python3 tools
      - name: "PKINITtools"
        repo: "github.com/dirkjanm/PKINITtools"
        pip: yes # Run pip install
        pip_requirements_file: "requirements.txt"

      - name: "impacket"
        repo: "github.com/ThePorgs/impacket"
        pip: yes # Run pip install
        pip_packages:
          - "."

      - name: "krbrelayx"
        repo: "github.com/dirkjanm/krbrelayx"
        pip: yes # Run pip install
        pip_packages: # Install additional pip packages
          - "impacket"
          - "dsinternals"

      - name: "mitm6"
        repo: "github.com/dirkjanm/mitm6"
        pip: yes # Run pip install
        pip_packages:
          - "."

      - name: "pre2k"
        repo: "github.com/garrettfoster13/pre2k"
        pip: yes # Run pip install
        pip_packages:
          - "."

      - name: "CrackMapExec"
        repo: "github.com/Porchetta-Industries/CrackMapExec"
        pip: yes # Run pip install
        pip_packages:
          - "."
        package_dependencies:
          - "libssl-dev"
          - "libffi-dev"
          - "python-dev-is-python3"
          - "build-essential"

      - name: "PetitPotam"
        repo: "github.com/topotam/PetitPotam"
        pip: yes # Run pip install
        pip_packages:
          - "impacket"

      - name: "Responder"
        repo: "github.com/lgandx/Responder"
        pip: yes # Run pip install
        pip_requirements_file: "requirements.txt"

      - name: BloodHound.py
        repo: "github.com/fox-it/BloodHound.py"
        pip: yes # Run pip install
        pip_packages:
          - "."

      - name: "SeeYouCM-Thief"
        repo: "github.com/trustedsec/SeeYouCM-Thief"
        pip: yes
        pip_requirements_file: "requirements.txt"

      - name: "Certipy"
        repo: "github.com/ly4k/Certipy"
        pip: yes
        pip_packages:
          - "."

      - name: "spraycharles"
        repo: "github.com/Tw1sm/spraycharles"
        pip: yes
        pip_packages:
          - "."

      - name: "RITM"
        repo: "github.com/Tw1sm/RITM"
        pip: yes
        pip_packages:
          - "."

    packages: # Apt packages
      - nmap
      - 7zip
      - zip
      - unzip
      - tar

    go_repos: # go tools
      - "github.com/lkarlslund/ldapnomnom@latest"
      - "github.com/projectdiscovery/pdtm/cmd/pdtm@latest"
      - "github.com/tomnomnom/waybackurls@latest"
      - "github.com/projectdiscovery/pdtm/cmd/pdtm@latest"

  tasks:

    - name: Update hosts file
      become: yes
      lineinfile:
        dest: /etc/hosts
        line: '127.0.1.1  {{ vm_hostname }}'

    - name: Update hostname
      become: yes
      hostname:
        name: "{{ vm_hostname }}"

    # Baseline tasks
    - name: Update APT Repo
      become: yes
      apt:
        update_cache: yes

    - name: Install Python 3 packages
      become: yes
      package:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    - include: ./apt.yml
      loop: "{{ packages }}"

    - include: ./vscode.yml

    - include: ./golang.yml

    - name: Update PATH
      become: yes
      lineinfile:
        dest: /etc/zsh/zshrc
        line: 'export PATH=$PATH:/usr/local/go/bin:/home/{{ vm_username }}/.local/bin:$HOME/go/bin'

    # - name: Add Go Bin to PATH
    #   become: yes
    #   copy:
    #     dest: /etc/profile.d/golang-path.sh
    #     content: 'export PATH=$PATH:/usr/local/go/bin'
    #     owner: '{{ vm_username }}'
    #     group: '{{ vm_username }}'
    #     mode: 'u=rw,go=r'

    - include: ./gotools.yml
      loop: "{{ go_repos }}"

    # Tools directory setup
    - name: Create Tools Directory
      become: yes
      file:
        path: "{{ vm_tools_dir }}"
        owner: "{{ vm_username }}"
        group: "{{ vm_username }}"
        state: directory
        mode: 0755

    - name: Create Tools Source Directory
      become: yes
      file:
        path: "{{ vm_tools_source_dir }}"
        owner: "{{ vm_username }}"
        group: "{{ vm_username }}"
        state: directory
        mode: 0755

    - name: Create User Local Bin Directory
      file:
        path: "/home/{{ vm_username }}/.local/bin"
        owner: "{{ vm_username }}"
        group: "{{ vm_username }}"
        state: directory
        mode: 0755

    - name: Create Bash Log Directory
      become: yes
      file:
        path: "/opt/op-log"
        owner: "{{ vm_username }}"
        group: "{{ vm_username }}"
        state: directory
        mode: 0755

    - name: Add User Local Bin to PATH
      become: yes
      copy:
        dest: /etc/profile.d/golang-path.sh
        content: 'export PATH=$PATH:/usr/local/go/bin'
        owner: '{{ vm_username }}'
        group: '{{ vm_username }}'
        mode: 'u=rw,go=r'

    # Clone repositories and link to tools directory
    - include: git-clone.yml
      loop: "{{ repositories }}"

    - name: Link Tool Repos to Tool Directory
      file:
        src: "{{ vm_tools_source_dir }}/{{ item.repo }}"
        dest: "{{ vm_tools_dir }}/{{ item.name }}"
        state: link
      with_items: "{{ repositories }}"

    - include: pip-install.yml
      loop: "{{ repositories }}"

    # BloodHound GUI
    # TODO: Break this out into it's own role
    # TODO: Install neo4j
    - include: bloodhound.yml

    # BurpSuite Pro
    # TODO: Break this out into it's own role
    - include: burpsuite-pro.yml

    - name: Set ZSH for User
      become: yes
      ansible.builtin.user:
        name: "{{ vm_username }}"
        shell: "/bin/zsh"

    # Enable Kali Logging
    - name: Enable Kali Logging
      shell: |
        sudo mkdir -p /opt/op-log
        sudo chown -R ${vm_username}:${vm_username} /opt/op-log

        # This base64 blob decodes as follows:
        echo test "$(ps -ocommand= -p $PPID | awk '{print $1}')" == 'script' || (script -f /opt/op-log/$(date +"%Y-%m-%d_%H-%M-%S")_shell.log)
        # export PS1="[\$(date +\"%Y-%m-%d %H:%M:%S\")]"$'\n'"$PS1"
        # set -o vi

        echo "bWtkaXIgLXAgL29wdC9vcC1sb2cKdGVzdCAiJChwcyAtb2NvbW1hbmQ9IC1wICRQUElEIHwgYXdrICd7cHJpbnQgJDF9JykiID09ICdzY3JpcHQnIHx8IChzY3JpcHQgLWYgL29wdC9vcC1sb2cvJChkYXRlICsiJVktJW0tJWRfJUgtJU0tJVMiKV9zaGVsbC5sb2cpCmV4cG9ydCBQUzE9IltcJChkYXRlICtcIiVZLSVtLSVkICVIOiVNOiVTXCIpXSIkJ1xuJyIkUFMxIgpzZXQgLW8gdmkK" |base64 -d >>  ~/.zshrc

        echo "termcapinfo xterm* ti@:te@" >> ~/.screenrc
      args:
        creates: "/opt/op-log/"

    # Gowitness Install
    - include: gowitness.yml

    - include: sublime.yml
